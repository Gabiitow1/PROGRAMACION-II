PROGRAMACIÓN II
Trabajo Práctico 7: Herencia y
Polimorfismo en Java

Link github: 
OBJETIVO GENERAL
Comprender y aplicar los conceptos de herencia y polimorfismo en la Programación
Orientada a Objetos, reconociendo su importancia para la reutilización de código, la
creación de jerarquías de clases y el diseño flexible de soluciones en Java.
MARCO TEÓRICO
 
Caso Práctico
Desarrollar las siguientes Katas en Java aplicando herencia y polimorfismo. Se
recomienda repetir cada kata para afianzar el concepto.
1. Vehículos y herencia básica
● Clase base: Vehículo con atributos marca, modelo y método mostrarInfo()
● Subclase: Auto con atributo adicional cantidadPuertas, sobrescribe
mostrarInfo()
● Tarea: Instanciar un auto y mostrar su información completa.
2. Figuras geométricas y métodos abstractos
● Clase abstracta: Figura con método calcularArea() y atributo nombre
● Subclases: Círculo y Rectángulo implementan el cálculo del área
● Tarea: Crear un array de figuras y mostrar el área de cada una usando
polimorfismo.
3. Empleados y polimorfismo
● Clase abstracta: Empleado con método calcularSueldo()
● Subclases: EmpleadoPlanta, EmpleadoTemporal
● Tarea: Crear lista de empleados, invocar calcularSueldo() polimórficamente,
usar instanceof para clasificar
4. Animales y comportamiento sobrescrito
● Clase: Animal con método hacerSonido() y describirAnimal()
● Subclases: Perro, Gato, Vaca sobrescriben hacerSonido() con @Override
● Tarea: Crear lista de animales y mostrar sus sonidos con polimorfismo
CONCLUSIONES ESPERADAS
● Comprender el mecanismo de herencia y sus beneficios para la reutilización de
código.
● Aplicar polimorfismo para lograr flexibilidad en el diseño de programas.
● Inicializar objetos correctamente usando super en constructores.
● Controlar el acceso a atributos y métodos con modificadores adecuados.
● Identificar y aplicar upcasting, downcasting y instanceof correctamente.
● Utilizar clases y métodos abstractos como base de jerarquías lógicas.
● Aplicar principios de diseño orientado a objetos en la implementación en Java.

1)
// Clase base
public class Vehiculo {
    private String marca;
    private String modelo;

    public Vehiculo(String marca, String modelo) {
        this.marca = marca;
        this.modelo = modelo;
    }

    public void mostrarInfo() {
        System.out.println("Marca: " + marca + ", Modelo: " + modelo);
    }
}

// Subclase
public class Auto extends Vehiculo {
    private int cantidadPuertas;

    public Auto(String marca, String modelo, int cantidadPuertas) {
        super(marca, modelo);
        this.cantidadPuertas = cantidadPuertas;
    }

    @Override
    public void mostrarInfo() {
        super.mostrarInfo();
        System.out.println("Cantidad de puertas: " + cantidadPuertas);
    }

    public static void main(String[] args) {
        Auto miAuto = new Auto("Toyota", "Corolla", 4);
        miAuto.mostrarInfo();
    }
}
2)
// Clase abstracta
public abstract class Figura {
    private String nombre;

    public Figura(String nombre) {
        this.nombre = nombre;
    }

    public String getNombre() {
        return nombre;
    }

    public abstract double calcularArea();
}

// Subclases
public class Circulo extends Figura {
    private double radio;

    public Circulo(double radio) {
        super("Círculo");
        this.radio = radio;
    }

    @Override
    public double calcularArea() {
        return Math.PI * radio * radio;
    }
}

public class Rectangulo extends Figura {
    private double ancho;
    private double alto;

    public Rectangulo(double ancho, double alto) {
        super("Rectángulo");
        this.ancho = ancho;
        this.alto = alto;
    }

    @Override
    public double calcularArea() {
        return ancho * alto;
    }
}

// Uso de polimorfismo
public class MainFiguras {
    public static void main(String[] args) {
        Figura[] figuras = { new Circulo(3), new Rectangulo(4, 5) };

        for (Figura f : figuras) {
            System.out.println(f.getNombre() + " - Área: " + f.calcularArea());
        }
    }
}
3)
// Clase abstracta
public abstract class Empleado {
    private String nombre;

    public Empleado(String nombre) {
        this.nombre = nombre;
    }

    public String getNombre() {
        return nombre;
    }

    public abstract double calcularSueldo();
}

// Subclases
public class EmpleadoPlanta extends Empleado {
    private double salarioMensual;

    public EmpleadoPlanta(String nombre, double salarioMensual) {
        super(nombre);
        this.salarioMensual = salarioMensual;
    }

    @Override
    public double calcularSueldo() {
        return salarioMensual;
    }
}

public class EmpleadoTemporal extends Empleado {
    private double pagoPorHora;
    private int horasTrabajadas;

    public EmpleadoTemporal(String nombre, double pagoPorHora, int horasTrabajadas) {
        super(nombre);
        this.pagoPorHora = pagoPorHora;
        this.horasTrabajadas = horasTrabajadas;
    }

    @Override
    public double calcularSueldo() {
        return pagoPorHora * horasTrabajadas;
    }
}

// Uso de polimorfismo y instanceof
import java.util.ArrayList;

public class MainEmpleados {
    public static void main(String[] args) {
        ArrayList<Empleado> empleados = new ArrayList<>();
        empleados.add(new EmpleadoPlanta("Ana", 50000));
        empleados.add(new EmpleadoTemporal("Luis", 300, 160));

        for (Empleado e : empleados) {
            System.out.println(e.getNombre() + " - Sueldo: " + e.calcularSueldo());
            if (e instanceof EmpleadoPlanta) {
                System.out.println("Tipo: Planta");
            } else if (e instanceof EmpleadoTemporal) {
                System.out.println("Tipo: Temporal");
            }
        }
    }
}
4)

// Clase base
public class Animal {
    public void hacerSonido() {
        System.out.println("El animal hace un sonido.");
    }

    public void describirAnimal() {
        System.out.println("Soy un animal.");
    }
}

// Subclases
public class Perro extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("Guau guau!");
    }
}

public class Gato extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("Miau miau!");
    }
}

public class Vaca extends Animal {
    @Override
    public void hacerSonido() {
        System.out.println("Muuuu!");
    }
}

// Uso de polimorfismo
import java.util.ArrayList;

public class MainAnimales {
    public static void main(String[] args) {
        ArrayList<Animal> animales = new ArrayList<>();
        animales.add(new Perro());
        animales.add(new Gato());
        animales.add(new Vaca());

        for (Animal a : animales) {
            a.hacerSonido();
        }
    }
}

